// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: user.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (
	username,
	hashed_password,
	full_name,
	email
) VALUES (
  $1, $2, $3, $4
) RETURNING username, hashed_password, full_name, email, password_changed_at, created_at, is_email_verified, role
`

type CreateUserParams struct {
	Username       string `json:"username"`
	HashedPassword string `json:"hashed_password"`
	FullName       string `json:"full_name"`
	Email          string `json:"email"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.Username,
		arg.HashedPassword,
		arg.FullName,
		arg.Email,
	)
	var i User
	err := row.Scan(
		&i.Username,
		&i.HashedPassword,
		&i.FullName,
		&i.Email,
		&i.PasswordChangedAt,
		&i.CreatedAt,
		&i.IsEmailVerified,
		&i.Role,
	)
	return i, err
}

const getUser = `-- name: GetUser :one
SELECT username, hashed_password, full_name, email, password_changed_at, created_at, is_email_verified, role FROM users
WHERE username = $1 LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, username string) (User, error) {
	row := q.db.QueryRow(ctx, getUser, username)
	var i User
	err := row.Scan(
		&i.Username,
		&i.HashedPassword,
		&i.FullName,
		&i.Email,
		&i.PasswordChangedAt,
		&i.CreatedAt,
		&i.IsEmailVerified,
		&i.Role,
	)
	return i, err
}

const updateUser = `-- name: UpdateUser :one
UPDATE users
SET
	hashed_password = coalesce($1, hashed_password),
	full_name = coalesce($2, full_name),
	email = coalesce($3, email),
	password_changed_at = coalesce($4, password_changed_at),
	is_email_verified = coalesce($5, is_email_verified)
WHERE
	username = $6
RETURNING username, hashed_password, full_name, email, password_changed_at, created_at, is_email_verified, role
`

type UpdateUserParams struct {
	HashedPassword    pgtype.Text        `json:"hashed_password"`
	FullName          pgtype.Text        `json:"full_name"`
	Email             pgtype.Text        `json:"email"`
	PasswordChangedAt pgtype.Timestamptz `json:"password_changed_at"`
	IsEmailVerified   pgtype.Bool        `json:"is_email_verified"`
	WhereUsername     string             `json:"where_username"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, updateUser,
		arg.HashedPassword,
		arg.FullName,
		arg.Email,
		arg.PasswordChangedAt,
		arg.IsEmailVerified,
		arg.WhereUsername,
	)
	var i User
	err := row.Scan(
		&i.Username,
		&i.HashedPassword,
		&i.FullName,
		&i.Email,
		&i.PasswordChangedAt,
		&i.CreatedAt,
		&i.IsEmailVerified,
		&i.Role,
	)
	return i, err
}

const updateUserWithCase = `-- name: UpdateUserWithCase :one
UPDATE users
SET
	hashed_password = CASE WHEN $1::boolean = TRUE
    THEN $2
    ELSE hashed_password
    END,
	full_name = CASE WHEN $3::boolean = TRUE
    THEN $4
    ELSE full_name
    END,
	email = CASE WHEN $5::boolean = TRUE
    THEN $6
    ELSE email
    END
WHERE
	username = $7
RETURNING username, hashed_password, full_name, email, password_changed_at, created_at, is_email_verified, role
`

type UpdateUserWithCaseParams struct {
	SetHashedPassword bool   `json:"set_hashed_password"`
	HashedPassword    string `json:"hashed_password"`
	SetFullName       bool   `json:"set_full_name"`
	FullName          string `json:"full_name"`
	SetEmail          bool   `json:"set_email"`
	Email             string `json:"email"`
	Username          string `json:"username"`
}

func (q *Queries) UpdateUserWithCase(ctx context.Context, arg UpdateUserWithCaseParams) (User, error) {
	row := q.db.QueryRow(ctx, updateUserWithCase,
		arg.SetHashedPassword,
		arg.HashedPassword,
		arg.SetFullName,
		arg.FullName,
		arg.SetEmail,
		arg.Email,
		arg.Username,
	)
	var i User
	err := row.Scan(
		&i.Username,
		&i.HashedPassword,
		&i.FullName,
		&i.Email,
		&i.PasswordChangedAt,
		&i.CreatedAt,
		&i.IsEmailVerified,
		&i.Role,
	)
	return i, err
}
